name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up .NET SDK
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0' # Match your project's .NET version

    # Step 3: Restore Dependencies
    - name: Restore Dependencies
      run: dotnet restore "RTS-Server/RTS-Server/RTS-Server.csproj"

    # Step 4: Build the Application
    - name: Build Application
      run: dotnet build "RTS-Server/RTS-Server/RTS-Server.csproj" --configuration Release --no-restore

    # Step 5: Run Tests (Optional)
    - name: Run Tests
      run: dotnet test "RTS-Server/RTS-Server/RTS-Server.csproj" --no-build --verbosity normal

    # Step 6: Build Docker Image for Local Registry
    - name: Build Docker Image for Local Registry
      run: docker build -t localhost:5000/rts-server:latest .

    # Step 7: Push Docker Image to Local Registry
    - name: Push Docker Image to Local Registry
      run: docker push localhost:5000/rts-server:latest

    # Step 8: Deploy to Server (Optional - Customize as Needed)
    - name: Deploy to Server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        TARGET_HOST: ${{ secrets.TARGET_HOST }}
        TARGET_USER: ${{ secrets.TARGET_USER }}
      run: |
        ssh -i "$SSH_PRIVATE_KEY" $TARGET_USER@$TARGET_HOST <<EOF
          docker pull localhost:5000/rts-server:latest
          docker stop rts-server || true
          docker rm rts-server || true
          docker run -d -p 8080:8080 --name rts-server localhost:5000/rts-server:latest
        EOF
