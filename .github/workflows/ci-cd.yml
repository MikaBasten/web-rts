name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: Set up .NET SDK
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0' # Match your project's .NET version

    # Step 3: Restore Dependencies
    - name: Restore Dependencies
      run: dotnet restore RTS-Server/RTS-Server.csproj

    # Step 4: Build the Application
    - name: Build Application
      run: dotnet build RTS-Server/RTS-Server.csproj --configuration Release --no-restore

    # Step 5: Run Tests (Optional)
    - name: Run Tests
      run: dotnet test RTS-Server/RTS-Server.csproj --no-build --verbosity normal

    # Step 6: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 7: Build Docker Image
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/rts-server:latest .

    # Step 8: Push Docker Image to Docker Hub
    - name: Push Docker Image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/rts-server:latest

    # Step 9: Deploy to Server (Customize as Needed)
    - name: Deploy to Server
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        TARGET_HOST: ${{ secrets.TARGET_HOST }}
        TARGET_USER: ${{ secrets.TARGET_USER }}
      run: |
        ssh -i "$SSH_PRIVATE_KEY" $TARGET_USER@$TARGET_HOST <<EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/rts-server:latest
          docker stop rts-server || true
          docker rm rts-server || true
          docker run -d -p 8080:8080 --name rts-server ${{ secrets.DOCKER_USERNAME }}/rts-server:latest
        EOF
